git is a code version tracking tool which is an open source and free technology we can integrate with our project no matter 
if its large or big. it works by tracking changes in current directory and then saving updates as a snapshot so any time we will
have guarantee that project is in stable state and if anything goes wrong we will always have a backup

commit is a current snapshot of code version that was being created after adding changes
firstly we should add changes with command git add -A
secondly we should commit changes with command git commit -m "commit message"

git branches are safe way to create snapshot of multiple changes. for example if we want to add a new feature or fix a bug 
you create new branch to encapsulate your changes without affecting or adding risk to driver code on main branch 

There is a pointer called HEAD which is basically a variable that Git uses to keep track of the tip of the current
branch in the repository. When we make new commits, the pointer moves to the last new commit.

downloading repository only gives us source code, files in repository without git in it without commit history branches only 
pure code nevertheless cloning repository in addition with files we have history of changes and we can manipulate with it in
in our way

there are tracked and untracked files 

git commit --amend -m "add new changes to the old commit and override message with specified onegi"

git log --follow -p <file_name> to show entire history of the file
gitk <filename> does the same

git log -L :<method_name>:<file_name> to show entire history for method inside a file

to merge checkout to the branch you want to merge into and then type git merge <branch_name> you want to merge

to undo the merge get commit sha before the merge and use git reset --hard <sha>

to delete commit git reset --hard HEAD~1 to move HEAD to the commit before HEAD.  

to reset with commit sha type git reset --hard <sha> which will remove everything until specified commit 

if code has been pushed before reset git push origin HEAD --force will force update on github

git revert undoes a commit without touching anything it does not rewrite history. git reset alters existing commit history
so git revert should be used to undo changes on public branch and git reset should be used to undo changes on private branch 
without breaking others histories


new text

undo changes -> no add no commit
git checkout <file_name>

undo changed -> add no commit
git restore --staged <file_name> to unstage file
git checkout <file_name> 

to undo commited change
git reset HEAD~
git checkout <file_name>

git push -d <branch_name> to delete remote branch

git tag list all tags

git tag <tag_name> create tag at pointer

git tag -a <tag_name> create annotated tag at pointer

git push --tags push all tags

git push <tag_name> push tag_name

git tag <tag_name> <commit_sha> -f update tag

git tag <tag_name> <commit> update previous tag